//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechPrint
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TechPrintEntities : DbContext
    {
        public TechPrintEntities()
            : base("name=TechPrintEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<PrintComponent> PrintComponents { get; set; }
        public virtual DbSet<PrintingParameter> PrintingParameters { get; set; }
        public virtual DbSet<PrintingParameterType> PrintingParameterTypes { get; set; }
        public virtual DbSet<PrintRateCalculation> PrintRateCalculations { get; set; }
        public virtual DbSet<QuotationJobSheet> QuotationJobSheets { get; set; }
        public virtual DbSet<QuotationJobSheetDetail> QuotationJobSheetDetails { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<PaperRate> PaperRates { get; set; }
        public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }
    
        public virtual ObjectResult<USP_BIND_MASTER_DATA_Result> USP_BIND_MASTER_DATA(Nullable<int> masterTypeId)
        {
            var masterTypeIdParameter = masterTypeId.HasValue ?
                new ObjectParameter("MasterTypeId", masterTypeId) :
                new ObjectParameter("MasterTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BIND_MASTER_DATA_Result>("USP_BIND_MASTER_DATA", masterTypeIdParameter);
        }
    
        public virtual int USP_MANAGE_JOB_SHEET(Nullable<long> quotationID, string quotationNO, Nullable<System.DateTime> quotationDate, Nullable<bool> iS_JOB, Nullable<int> customerID, Nullable<int> itemID, string itemDescription, Nullable<int> taxID, Nullable<decimal> gSTPercentage, Nullable<decimal> gSTWOPaper, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> taxableAmount, Nullable<decimal> discount, Nullable<decimal> totalBillingAmount, Nullable<decimal> amountPayable, Nullable<decimal> roundOff, Nullable<decimal> amountPaid, string remarks, string finYear, Nullable<int> requestBy, Nullable<int> opMode)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(long));
    
            var quotationNOParameter = quotationNO != null ?
                new ObjectParameter("QuotationNO", quotationNO) :
                new ObjectParameter("QuotationNO", typeof(string));
    
            var quotationDateParameter = quotationDate.HasValue ?
                new ObjectParameter("QuotationDate", quotationDate) :
                new ObjectParameter("QuotationDate", typeof(System.DateTime));
    
            var iS_JOBParameter = iS_JOB.HasValue ?
                new ObjectParameter("IS_JOB", iS_JOB) :
                new ObjectParameter("IS_JOB", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var gSTWOPaperParameter = gSTWOPaper.HasValue ?
                new ObjectParameter("GSTWOPaper", gSTWOPaper) :
                new ObjectParameter("GSTWOPaper", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var totalBillingAmountParameter = totalBillingAmount.HasValue ?
                new ObjectParameter("TotalBillingAmount", totalBillingAmount) :
                new ObjectParameter("TotalBillingAmount", typeof(decimal));
    
            var amountPayableParameter = amountPayable.HasValue ?
                new ObjectParameter("AmountPayable", amountPayable) :
                new ObjectParameter("AmountPayable", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("AmountPaid", amountPaid) :
                new ObjectParameter("AmountPaid", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var requestByParameter = requestBy.HasValue ?
                new ObjectParameter("RequestBy", requestBy) :
                new ObjectParameter("RequestBy", typeof(int));
    
            var opModeParameter = opMode.HasValue ?
                new ObjectParameter("OpMode", opMode) :
                new ObjectParameter("OpMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MANAGE_JOB_SHEET", quotationIDParameter, quotationNOParameter, quotationDateParameter, iS_JOBParameter, customerIDParameter, itemIDParameter, itemDescriptionParameter, taxIDParameter, gSTPercentageParameter, gSTWOPaperParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, taxableAmountParameter, discountParameter, totalBillingAmountParameter, amountPayableParameter, roundOffParameter, amountPaidParameter, remarksParameter, finYearParameter, requestByParameter, opModeParameter);
        }
    
        public virtual int USP_MANAGE_PRINT_RATE(Nullable<int> cuttingSizeID, Nullable<int> requestBy, Nullable<int> opMode)
        {
            var cuttingSizeIDParameter = cuttingSizeID.HasValue ?
                new ObjectParameter("CuttingSizeID", cuttingSizeID) :
                new ObjectParameter("CuttingSizeID", typeof(int));
    
            var requestByParameter = requestBy.HasValue ?
                new ObjectParameter("RequestBy", requestBy) :
                new ObjectParameter("RequestBy", typeof(int));
    
            var opModeParameter = opMode.HasValue ?
                new ObjectParameter("OpMode", opMode) :
                new ObjectParameter("OpMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MANAGE_PRINT_RATE", cuttingSizeIDParameter, requestByParameter, opModeParameter);
        }
    
        public virtual int USP_PAYMENT(Nullable<long> paymentID, Nullable<System.DateTime> paymentDate, Nullable<int> customerID, Nullable<int> paymentMode, Nullable<decimal> paidAmount, string paymentDetail, Nullable<int> requestBy, string finYear, Nullable<int> opMode, Nullable<int> jobSheetType)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(long));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var paymentDetailParameter = paymentDetail != null ?
                new ObjectParameter("PaymentDetail", paymentDetail) :
                new ObjectParameter("PaymentDetail", typeof(string));
    
            var requestByParameter = requestBy.HasValue ?
                new ObjectParameter("RequestBy", requestBy) :
                new ObjectParameter("RequestBy", typeof(int));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var opModeParameter = opMode.HasValue ?
                new ObjectParameter("OpMode", opMode) :
                new ObjectParameter("OpMode", typeof(int));
    
            var jobSheetTypeParameter = jobSheetType.HasValue ?
                new ObjectParameter("JobSheetType", jobSheetType) :
                new ObjectParameter("JobSheetType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_PAYMENT", paymentIDParameter, paymentDateParameter, customerIDParameter, paymentModeParameter, paidAmountParameter, paymentDetailParameter, requestByParameter, finYearParameter, opModeParameter, jobSheetTypeParameter);
        }
    
        public virtual int USP_SEARCH_PAYMENT_LIST(string currentSession, string searchColumn, string searchText, string fromDate, string toDate)
        {
            var currentSessionParameter = currentSession != null ?
                new ObjectParameter("CurrentSession", currentSession) :
                new ObjectParameter("CurrentSession", typeof(string));
    
            var searchColumnParameter = searchColumn != null ?
                new ObjectParameter("SearchColumn", searchColumn) :
                new ObjectParameter("SearchColumn", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SEARCH_PAYMENT_LIST", currentSessionParameter, searchColumnParameter, searchTextParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int USP_SEARCH_QUOTATION_LIST(string currentSession, string searchColumn, string searchText, string fromDate, string toDate)
        {
            var currentSessionParameter = currentSession != null ?
                new ObjectParameter("CurrentSession", currentSession) :
                new ObjectParameter("CurrentSession", typeof(string));
    
            var searchColumnParameter = searchColumn != null ?
                new ObjectParameter("SearchColumn", searchColumn) :
                new ObjectParameter("SearchColumn", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SEARCH_QUOTATION_LIST", currentSessionParameter, searchColumnParameter, searchTextParameter, fromDateParameter, toDateParameter);
        }
    }
}
